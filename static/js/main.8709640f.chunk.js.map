{"version":3,"sources":["ReactGallery.js","serviceWorker.js","index.js"],"names":["projectsData","id","title","category","imageURL","siteURL","Item","react_default","a","createElement","className","data-category","this","props","src","href","Component","FilterPanel","onClick","ReactGallery","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","projectCategories","forEach","el","indexOf","push","state","displayedItems","categories","selectedCategory","selectCategory","element","console","log","categoryName","toLowerCase","displayedCategories","filter","setState","map","i","click","bind","ReactGallery_FilterPanel","key","resetFilters","ReactGallery_Item","Boolean","window","location","hostname","match","ReactDOM","render","src_ReactGallery_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8709640f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './ReactGallery.css';\r\n\r\nconst projectsData = [{\r\n    id: 1,\r\n    title: 'Dermina',\r\n    category: 'strony internetowe',\r\n    imageURL: 'img/dermina_featured3.jpg',\r\n    siteURL: 'http://aleksandra-poltorak.pl/portfolio/dermina.html'\r\n}, {\r\n    id: 2,\r\n    title: 'JingleX',\r\n    category: 'strony internetowe',\r\n    imageURL: 'img/jinglex_featured3.jpg',\r\n    siteURL: 'http://aleksandra-poltorak.pl/portfolio/jinglex.html'\r\n}, {\r\n    id: 3,\r\n    title: 'JingleX 2017',\r\n    category: 'strony internetowe',\r\n    imageURL: 'img/jinglex_old_featured.jpg',\r\n    siteURL: 'http://aleksandra-poltorak.pl/portfolio/jinglex2017.html'\r\n}, {\r\n    id: 4,\r\n    title: 'Lista zakupów',\r\n    category: 'aplikacje',\r\n    imageURL: 'img/lista-zakupow_featured.jpg',\r\n    siteURL: 'http://aleksandra-poltorak.pl/portfolio/lista-zakupow.html'\r\n}];\r\n\r\nclass Item extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"ReactGallery__item\" data-category={this.props.category}>\r\n                <img src={this.props.imageURL}/>\r\n                <span className=\"ReactGallery-item__title\">\r\n                    {this.props.title}\r\n                </span>\r\n                <span className=\"ReactGallery-item__description\">\r\n                        {this.props.title}\r\n                        </span>\r\n                <div className=\"ReactGallery-item__details\">\r\n                    <a className=\"button\" href={this.props.siteURL}>\r\n                        Szczegóły\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass FilterPanel extends Component {\r\n    render() {\r\n        return (\r\n            <a className=\"button button-dark\" onClick={this.props.onClick}>{this.props.category}</a>\r\n        )\r\n    }\r\n}\r\n\r\nclass ReactGallery extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let projectCategories = [];\r\n        projectsData.forEach(function (el) {\r\n            if (projectCategories.indexOf(el.category) === -1) projectCategories.push(el.category);\r\n        });\r\n        this.state = {\r\n            displayedItems: projectsData,\r\n            categories: projectCategories,\r\n            selectedCategory: this.selectCategory\r\n        }\r\n\r\n    }\r\n\r\n    selectCategory(element) {\r\n        console.log(this.state.selectedCategory);\r\n        console.log(element);\r\n        const categoryName = element.toLowerCase();\r\n        console.log(categoryName);\r\n        let displayedCategories = projectsData.filter(function (el) {\r\n            return el.category.toLowerCase().indexOf(categoryName) !== -1;\r\n        });\r\n        this.setState({\r\n            displayedItems: displayedCategories\r\n        });\r\n    }\r\n\r\n    resetFilters() {\r\n        this.setState({\r\n            displayedItems: projectsData\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ReactGallery\">\r\n                <div className=\"ReactGallery__filter\">\r\n                    <span className=\"ReactGallery__filter-header\">Filtruj:</span>\r\n                    {\r\n                        this.state.categories.map(function (el, i) {\r\n                            let click = this.state.selectedCategory.bind(this, el);\r\n                            return <FilterPanel onClick={click} category={el} key={i}/>\r\n                        }, this)\r\n                    }\r\n                    <a className=\"button button-dark filter__btn filter__btn--reset\"\r\n                       onClick={this.resetFilters.bind(this)}>\r\n                        Pokaż wszystkie\r\n                    </a>\r\n                </div>\r\n                <div className=\"ReactGallery__content\">\r\n                    {\r\n                        this.state.displayedItems.map(function (el) {\r\n                            return <Item key={el.id} imageURL={el.imageURL} category={el.category} title={el.title}\r\n                                         siteURL={el.siteURL}/>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactGallery;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ReactGallery from './ReactGallery';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ReactGallery />, document.getElementById('react-gallery'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}